<hr>

<p>This is how we handled the edit event function:</p>
<br/>

<br/>

<p>This code snippet exports a function called <code>Modify_event</code> which takes in <code>props</code> of type <code>Cards</code>. Inside the function, it initializes a form using <code>useForm</code> hook with initial values based on the <code>props</code> passed in. It also defines validation rules for the <code>title</code>, <code>description</code>, and <code>place</code> fields using the <code>hasLength</code> function.</p>
<p>The code snippet also initializes a state variable <code>tagList</code> using <code>useState</code> hook, which is initially set to the <code>tags</code> prop value or an empty array. It also initializes a state variable <code>dateError</code> to handle any errors related to the date selection.</p>
<p>The code snippet includes an <code>useEffect</code> hook that runs when the value of <code>form.values.datetime</code> changes. Inside the effect, it checks if the selected date is in the future compared to the current date. If not, it sets the <code>dateError</code> state variable with an error message. Otherwise, it clears the <code>dateError</code>.</p>
<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->
<h3 id="ðŸ“„-fronteventifysrcappeventidmodify_eventtsx">ðŸ“„ front/eventify/src/app/event/[id]/modify_event.tsx</h3>
<!-- collapsed -->

<pre><code class="language-tsx">28     export default function Modify_event(props: Cards) {
29         const form = useForm&lt;formEvent&gt;({
30             initialValues: {
31                 id: props.id,
32                 title: props.title,
33                 description: props.description,
34                 place: props.place,
35                 datetime: new Date(props.datetime),
36                 tags: props.tags,
37             },
38             validate: {
39                 title: hasLength({min: 2, max: 30}, &#39;Title must be 2-30 characters long&#39;),
40                 description: hasLength({min: 2, max: 255}, &#39;Description must be 2-255 characters long&#39;),
41                 place: hasLength({min: 2, max: 20}, &#39;Place must be 2-20 characters long&#39;),
42             }
43         });
44         const [tagList, setTagList] = useState&lt;string[]&gt;(props.tags || []);
45         const router = useRouter()
46         const [dateError, setDateError] = useState&lt;string | null&gt;(null);
47
48         useEffect(() =&gt; {
49             const currentDate = new Date();
50             if (form.values.datetime &amp;&amp; form.values.datetime &lt;= currentDate) {
51                 setDateError(&quot;Please select a future date for the event.&quot;);
52             } else {
53                 setDateError(null);
54             }
55         }, [form.values.datetime]);
56
</code></pre>
<br/>

<p>This code snippet is an <code>async</code> function called <code>createEvent()</code>. It first checks if there is an error in the <code>dateError</code> variable. If there is an error, it logs a message and returns, preventing the data from being sent. Next, it logs the values from a <code>form</code> object. Then, it checks if the form is valid using the <code>isValid()</code> function. If the form is valid, it makes a POST request to a specified URL using <code>fetch()</code>. The request includes the form values as a JSON string in the request body and sets the <code>Content-Type</code> and <code>Authorization</code> headers. After sending the request, it checks the response by chaining <code>.then()</code> methods. If the response URL is different from the specified URL or if the response status is not 200, it logs an error message and returns <code>null</code>. If the response is valid, it parses the response body as JSON and logs the parsed data. Finally, if the request is successful, it shows a notification indicating that the event modification was successful. Any errors that occur during the execution of the function are caught and logged. After the execution, the function navigates to the &quot;/home&quot; route using <code>router.push()</code>.</p>
<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->
<h3 id="ðŸ“„-fronteventifysrcappeventidmodify_eventtsx-1">ðŸ“„ front/eventify/src/app/event/[id]/modify_event.tsx</h3>
<!-- collapsed -->

<pre><code class="language-tsx">56
57         async function createEvent() {
58             if (dateError) {
59                 console.log(&quot;Date validation error:&quot;, dateError);
60                 return; // Non inviare i dati se c&#39;Ã¨ un errore nella data
61             }
62             console.log(form.values)
63             if (form.isValid()) {
64                 const url = &quot;http://localhost:8080/api/event/upgradeEvent&quot;
65                 try {
66                     await fetch(url, {
67                             method: &quot;POST&quot;,
68                             headers: {
69                                 &quot;Content-Type&quot;: &quot;application/json&quot;,
70                                 &quot;Authorization&quot;: `Bearer ${Cookies.get(&quot;token&quot;)}`
71                             },
72                             body: JSON.stringify(form.values)
73                         }
74                     ).then((v) =&gt; {
75                         console.log(v)
76                         if (v.url !== url) {
77                             return null
78                         }
79                         if (v.status !== 200) {
80                             console.log(v.status + &quot; =&gt; ERROR STATUS&quot;)
81                             return null;
82                         }
83                         return v.json()
84                     }).then((v) =&gt; {
85                         console.log(v)
86                         if (v) {
87                             // Invia una notifica se la modifica dell&#39;evento ha avuto successo
88                             const notification = {
89                                 title: &quot;Evento modificato&quot;,
90                                 message: &quot;La modifica dell&#39;evento Ã¨ stata completata con successo!&quot;,
91                             };
92                             Notifications.show(notification);
93                         }
94                     }).catch()
95                 } catch (e: any) {
96                     console.log(e.toString())
97                 }
98                 router.push(&quot;/home&quot;)
99             }
100        }
101
</code></pre>
<br/>

<p>This code snippet is a React component that renders a form for modifying an event. It includes input fields for the event&#39;s title, description, image, date, place, and tags. The form uses a library called <code>react-hook-form</code> for managing form state and validation.</p>
<!-- NOTE-swimm-snippet: the lines below link your snippet to Swimm -->
<h3 id="ðŸ“„-fronteventifysrcappeventidmodify_eventtsx-2">ðŸ“„ front/eventify/src/app/event/[id]/modify_event.tsx</h3>
<!-- collapsed -->

<pre><code class="language-tsx">101
102        return (
103                &lt;form onSubmit={form.onSubmit(console.log)}&gt;
104                    &lt;Title                    align=&quot;center&quot;
105                        sx={(theme) =&gt; ({fontFamily: `Greycliff CF, ${theme.fontFamily}`, fontWeight: 900})}
106                    &gt;
107                        Modify your event
108                    &lt;/Title&gt;
109                    &lt;Paper withBorder shadow=&quot;md&quot; p={30} mt={30} radius=&quot;md&quot;&gt;
110                        &lt;TextInput label=&quot;Title&quot; placeholder={props.title} required {...form.getInputProps(&#39;title&#39;)}/&gt;
111                        &lt;TextInput label=&quot;Description&quot; placeholder={props.description}
112                                   required {...form.getInputProps(&#39;description&#39;)}/&gt;
113                        &lt;FileInput
114                            placeholder=&quot;Your image&quot;
115                            label=&quot;Profile picture&quot;
116                            accept=&quot;image/png,image/jpeg&quot;
117                            multiple
118                        /&gt;
119                        &lt;DateTimePicker
120                            clearable
121                            {...form.getInputProps(&#39;datetime&#39;)}
122                            valueFormat=&quot;DD MMM YYYY HH:mm&quot;
123                            label=&quot;Date of event&quot;
124                            maxDate={new Date(new Date().getFullYear() + 1, 11, 31)} // Optional: Set a maximum date (e.g., one year in the future)
125                            error={dateError}
126                            maw={400}
127                            mx=&quot;auto&quot;
128                            required
129                        /&gt;
130                        &lt;TextInput label=&quot;Place&quot; placeholder={props.place} required {...form.getInputProps(&#39;place&#39;)}/&gt;
131                        &lt;MultiSelect
132                            data={tagList}
133                            {...form.getInputProps(&quot;tags&quot;)}
134                            clearable
135                            searchable
136                            creatable
137                            getCreateLabel={(value) =&gt; `Create &quot;${value}&quot;`}
138                            onCreate={(value) =&gt; {
139                                const newValue: {value: string, label: string} = {value: value, label: value}
140                                setTagList([...tagList, value])
141                                form.setFieldValue(&quot;tags&quot;, form.values.tags !== null ?[...form.values.tags, value]:[])
142                                return newValue
143                            }}
144                            nothingFound={&quot;No tags found&quot;}
145                            label={&quot;Tags&quot;}/&gt;
146                        &lt;Button variant=&quot;outline&quot; mt=&quot;sm&quot; onClick={createEvent}&gt;
147                            Modify event
148                        &lt;/Button&gt;
149                    &lt;/Paper&gt;
150                &lt;/form&gt;
151        )
152    }
</code></pre>
<br/>
